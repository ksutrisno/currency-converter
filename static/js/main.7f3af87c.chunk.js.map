{"version":3,"sources":["CurrencyConverter/CurrencyConverter.js","App.js","serviceWorker.js","index.js"],"names":["options","ShowCurrencyList","props","list","currencyList","map","item","className","key","id","base","conversionRate","toFixed","value","onClick","handleDelete","bind","CurrencyConverter","state","isFormActive","date","rates","currency","handleBaseChange","handleBaseSubmit","handleNewCurrency","fetch","response","json","data","this","setState","i","Object","keys","length","newElement","push","event","target","preventDefault","showForm","itemToBeDeleted","newList","filter","isActive","onSubmit","e","type","placeholder","onChange","createNewCurrencyBox","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f3af87c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './CurrencyConverter.css';\r\nimport SelectSearch from 'react-select-search'\r\n\r\n\r\n\r\nconst options = [];\r\n\r\nfunction ShowCurrencyList(props)\r\n{\r\n    const list = props.currencyList.map((item) => {\r\n        return <div className = \"currency-box\" key= {item.id}>\r\n            <div className =\"currency-info\">             \r\n                <div className = \"currency-abb\"><b>{item.id}</b></div> \r\n                <div className = \"currency-name\">{props.base} - {item.id}</div> \r\n                <div className = \"currency-conversion\">1 {props.base}= {item.id} {item.conversionRate.toFixed(3)}</div> \r\n            </div>\r\n            <div className = \"currency-amount\"> <b>{ (props.value * item.conversionRate).toFixed(3)}</b> </div>\r\n            <button className =\"remove-button\" onClick = {props.handleDelete.bind(null, item)}>(-)</button>\r\n         </div>\r\n    })\r\n    return (\r\n        <div className = \"currency-converter\">\r\n            {list}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass CurrencyConverter extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.handleBaseChange = this.handleBaseChange.bind(this);\r\n        this.handleBaseSubmit = this.handleBaseSubmit.bind(this);\r\n        this.handleNewCurrency = this.handleNewCurrency.bind(this);\r\n    }\r\n\r\n    state = {\r\n        isFormActive: false,\r\n        base:null,\r\n        date:null,\r\n        rates:[],\r\n        value: (10).toFixed(3),\r\n        currency:\"\",\r\n        currencyList: []\r\n      }\r\n\r\n\r\n      async componentDidMount() {\r\n        const url = 'https://api.exchangeratesapi.io/latest?base=USD';\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        this.setState(\r\n            {\r\n                base:data.base,\r\n                date:data.date,\r\n                rates:data.rates\r\n            });\r\n            \r\n          \r\n            for (var i=0; i < Object.keys(data.rates).length; i++) {\r\n                var newElement = {};\r\n                newElement['name'] = Object.keys(data.rates)[i];\r\n                newElement['value'] = Object.keys(data.rates)[i];\r\n                options.push(newElement);\r\n            }\r\n\r\n      }\r\n\r\n    handleBaseChange(event) {\r\n        this.setState({value: event.target.value});\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleBaseSubmit(event) {\r\n        this.setState({value: event.target.value});\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleNewCurrency(event) {\r\n          this.setState({currency:event.value});\r\n    }\r\n\r\n    createNewCurrencyBox()\r\n    {    \r\n        if(this.state.rates[this.state.currency] != null)\r\n        {\r\n            var newElement = {};\r\n            newElement['id'] = this.state.currency;\r\n            newElement['conversionRate'] = this.state.rates[this.state.currency];\r\n            this.state.currencyList.push(newElement);  \r\n        }\r\n\r\n       \r\n        this.setState({currency: \"\"});\r\n        this.showForm(false);\r\n\r\n    }\r\n\r\n    handleDelete(itemToBeDeleted)\r\n    {\r\n       var newList = this.state.currencyList.filter((item)=>{\r\n            return item != itemToBeDeleted\r\n       });\r\n\r\n       this.setState({currencyList:newList});\r\n    }\r\n\r\n    showForm(isActive)\r\n    {\r\n        this.setState({isFormActive:isActive});\r\n    }\r\n\r\n\r\n    render () {\r\n        const isFormActive = this.state.isFormActive;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Currency Converter</h1>\r\n            \r\n                <div className = \"currency-converter\">\r\n                <div>\r\n                    <form className = \"base-currency\"  onSubmit={e => { e.preventDefault(); }} >\r\n                        <label>\r\n                            <b>USD</b>                       \r\n                        </label>\r\n                        <input type=\"text\" placeholder= {this.state.value} onChange={this.handleBaseChange} />\r\n                    </form>\r\n                </div>\r\n              \r\n                <ShowCurrencyList handleDelete = {this.handleDelete.bind(this)} base = {this.state.base}  value = {this.state.value} currencyList = {this.state.currencyList}/>\r\n                        \r\n                {isFormActive ? \r\n                 ( <div className = \"dropdown\">  \r\n                 <SelectSearch className = \"select-search-box\" options={options} value={this.state.currency} placeholder=\"Select Currency\" \r\n                    onChange = {this.handleNewCurrency}  /> \r\n                     <button className =\"submit-button\" onClick = {()=>this.createNewCurrencyBox()}>Submit </button>\r\n                     </div>)  : \r\n                 (<button className =\"add-button\" onClick = {()=>this.showForm(true)}>(+) Add new currency</button>)\r\n                }\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n  \r\n \r\n\r\nexport default CurrencyConverter;\r\n\r\n","import React, {Component} from 'react';\n\n\nimport './App.css';\nimport CurrencyConverter from './CurrencyConverter/CurrencyConverter';\n\n\nclass App extends Component{\n  render ()\n  {\n\n  return(\n    <div>\n       <CurrencyConverter></CurrencyConverter>\n    </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}